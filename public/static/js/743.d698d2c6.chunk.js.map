{"version":3,"file":"static/js/743.d698d2c6.chunk.js","mappings":"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","sources":["Pages/AddProducts.js","components/util/Input.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Input from \"../components/util/Input\";\r\n\r\nconst AddProduct = () => {\r\n  const [formValues, setFormValues] = useState({\r\n    id: parseInt(Math.random() * 10000 + 1),\r\n    pName: \"\",\r\n    pDescription: \"\",\r\n    price: \"\",\r\n    imgUrl: \"\",\r\n  });\r\n\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n\r\n  const addProductHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!formValues.pName) {\r\n      setError(\"Please enter a product name.\");\r\n      return;\r\n    }\r\n    if (!(formValues.pDescription && formValues.pDescription.length > 5)) {\r\n      setError(\"Please enter the description with at least 6 characters.\");\r\n      return;\r\n    }\r\n\r\n    if (!formValues.price || isNaN(formValues.price) || formValues.price <= 0) {\r\n      setError(\"Price must be a valid positive number.\");\r\n      return;\r\n    }\r\n\r\n    if (formValues.price >= 1000) {\r\n      setError(\"Price must be less than or equal to 999.\");\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !formValues.imgUrl ||\r\n      (!formValues.imgUrl.includes(\".jpg\") &&\r\n        !formValues.imgUrl.includes(\".jpeg\"))\r\n    ) {\r\n      setError(\"Please enter a valid image URL.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/add-product\",\r\n        formValues\r\n      );\r\n\r\n      console.log(response);\r\n      console.log(response.data);\r\n\r\n      if (response.status === 200) {\r\n        setSuccess(response.data.message);\r\n        // alert(response.data.message);\r\n      } else {\r\n        setError(\r\n          response.data.error || \"Error adding the product. Please try again.\"\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setError(error);\r\n      setSuccess(\"\");\r\n    } finally {\r\n      setFormValues({\r\n        id: parseInt(Math.random() * 10000 + 1),\r\n        pName: \"\",\r\n        pDescription: \"\",\r\n        price: \"\",\r\n        imgUrl: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (name, value) => {\r\n    setFormValues((prevValues) => ({\r\n      ...prevValues,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-md mx-auto mt-8 p-6 bg-white rounded-md shadow-md\">\r\n      <h2 className=\"text-2xl font-semibold text-gray-800 mb-6\">Add Product</h2>\r\n      {error && <div className=\"text-red-500 mb-4\">{error}</div>}\r\n      {success && (\r\n        <p className=\"mb-4 text-green-600 font-semibold\">{success}</p>\r\n      )}\r\n      <form onSubmit={addProductHandler}>\r\n        <Input\r\n          text=\"Product Name\"\r\n          name=\"pName\"\r\n          type=\"text\"\r\n          value={formValues.pName}\r\n          onChange={(e) => {\r\n            handleInputChange(\"pName\", e.target.value);\r\n            setError(\"\");\r\n          }}\r\n        />\r\n        <Input\r\n          text=\"Description\"\r\n          name=\"pDescription\"\r\n          type=\"text\"\r\n          value={formValues.pDescription}\r\n          onChange={(e) => {\r\n            handleInputChange(\"pDescription\", e.target.value);\r\n            setError(\"\");\r\n          }}\r\n        />\r\n        <Input\r\n          text=\"Price\"\r\n          name=\"price\"\r\n          type=\"number\"\r\n          value={formValues.price}\r\n          onChange={(e) => {\r\n            handleInputChange(\"price\", parseInt(e.target.value));\r\n            setError(\"\");\r\n          }}\r\n        />\r\n        <Input\r\n          text=\"Image URL\"\r\n          name=\"imgUrl\"\r\n          type=\"text\"\r\n          value={formValues.imgUrl}\r\n          onChange={(e) => {\r\n            handleInputChange(\"imgUrl\", e.target.value);\r\n            setError(\"\");\r\n          }}\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"bg-blue-500 text-white w-full py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:shadow-outline-green\"\r\n        >\r\n          Add Product\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddProduct;\r\n","import React from \"react\";\r\n\r\nconst Input = (props) => {\r\n  const { text = \"\", name, ...inputProps } = props;\r\n  const inputId = `${name}-input`;\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <label\r\n        className=\"block text-gray-700 text-sm font-semibold mb-2\"\r\n        htmlFor={inputId}\r\n      >\r\n        {text}\r\n      </label>\r\n      <input\r\n        id={inputId}\r\n        className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n        {...inputProps}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"],"names":["AddProduct","formValues","setFormValues","useState","id","parseInt","Math","random","pName","pDescription","price","imgUrl","error","setError","success","setSuccess","handleInputChange","name","value","prevValues","_jsxs","className","children","_jsx","onSubmit","async","event","preventDefault","length","isNaN","includes","response","axios","post","console","log","data","status","message","Input","text","type","onChange","e","target","props","inputProps","inputId","concat","htmlFor"],"sourceRoot":""}